// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider    = "prisma-client-js"
}

datasource db {
  provider    = "mysql"
  url         = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password      String
  phone         String
  role          String @default("user")
  createAt      DateTime @default(now()) @map("create_at")
  updateAt      DateTime @updatedAt @map("update_at")
  comments      Comment[]
  card          Cart[]
  Order         Order[]
  transactions  Transactions[]
  point         Point[]

  @@map("users")
}

model Category {
  id    Int @id @default(autoincrement())
  name  String

  product Product[]

  @@map("category")
}

model Product {
  id          Int      @id @default(autoincrement())
  artistId    Int @map("artist_id")
  name        String
  price       Int
  categoryId  Int @map("category_id")
  description String?
  stock       Int
  rating      Float?
  point       Int
  type        String @default("A")
  image       String?
  preOrder    Boolean @default(true) @map("pre_order")
  commentId   Int? @map("comment_id")

  order       Order[]
  cart        Cart[]
  category    Category @relation(fields: [categoryId], references: [id])
  artist      Artist    @relation(fields: [artistId], references: [id])
  comment     Comment? @relation(fields: [commentId], references: [id])
  sales       Sales[]
  createdAt   DateTime @default(now()) @map("create_at")
  updateAt    DateTime @updatedAt @map("update_at")

  @@map("products")
}

model Comment {
  id          Int @id @default(autoincrement())
  name        String
  userId      Int @map("user_id")

  product     Product[]
  user        User @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Artist {
  id            Int      @id @default(autoincrement())
  name          String
  image         String?
  debutDate     DateTime @map("debut_date")
  description   String?

  member        Member[]
  products      Product[]
  events        Event[]

  @@map("artist")
}

model Member {
  id            Int      @id @default(autoincrement())
  name          String
  artistId      Int
  image         String?
  birthDate     DateTime @map("birth_date")
  description   String?

  artist        Artist @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("members")
}

model Event {
  id          Int @id @default(autoincrement())
  artistId    Int @map("artist_id")
  name        String
  description String?
  date        DateTime
  location    String
  image       String?
  createdAt   DateTime @default(now()) @map("create_at")

  artist      Artist @relation(fields: [artistId], references: [id])

  @@map("event")
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now()) @map("create_at")
  updatedAt   DateTime @updatedAt @map("update_at")

  @@map("news")
}

model Order {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  productId     Int       @map("product_id")
  quantity      Int       @default(1)  
  totalAmount   Float     @map("total_amount")
  status        String    @default("pending")
  paymentStatus String    @default("unpaid") @map("payment_status") 
  createdAt     DateTime  @default(now()) @map("create_at")
  updatedAt     DateTime  @updatedAt @map("update_at")

  product       Product   @relation(fields: [productId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  transactions  Transactions[]

  @@map("orders")
}

model Cart {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  productId     Int      @map("product_id")
  quantity      Int      @default(1)
  status        String   @default("pending")
  createdAt     DateTime @default(now()) @map("create_at")
  updatedAt     DateTime @updatedAt @map("update_at")

  user          User     @relation(fields: [userId], references: [id])
  product       Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart")
}

model Transactions {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  orderId        Int       @map("order_id")
  amount         Float
  paymentMethod  String    @map("payment_method")
  status         String    @default("pending")
  createdAt      DateTime  @default(now()) @map("create_at")
  updatedAt      DateTime  @updatedAt @map("update_at")

  order          Order     @relation(fields: [orderId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  payment        Payment[]

  @@map("transaction")
}

model Payment {
  id             Int       @id @default(autoincrement())
  transactionId  Int       @map("transaction_id")
  provider       String    
  amount         Float 
  currency       String    @default("IDR")
  status         String    @default("pending")
  createdAt      DateTime  @default(now()) @map("create_at")
  updatedAt      DateTime  @updatedAt @map("update_at")

  transaction    Transactions @relation(fields: [transactionId], references: [id])

  @@map("payment")
}

model Point {
  id      Int @id @default(autoincrement())
  userId  Int @map("user_id")
  value   Int

  user    User @relation(fields: [userId], references: [id])

  @@map("point")
}

model Sales {
  id        Int @id @default(autoincrement())
  productId Int @map("product_id")

  soldOut   Int @map("sold_out")
  income    Int @default(0)
  product   Product @relation(fields: [productId], references: [id])

  @@map("sales")
}